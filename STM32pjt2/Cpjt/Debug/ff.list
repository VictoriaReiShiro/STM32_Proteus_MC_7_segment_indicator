
ff.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003618  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003748  08003748  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08003748  08003748  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003748  08003748  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000024  08003774  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08003774  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c726  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da2  00000000  00000000  0002c773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000068a4  00000000  00000000  0002e515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  00034dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ae8  00000000  00000000  00035990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000173cc  00000000  00000000  00036478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc2d  00000000  00000000  0004d844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000896a9  00000000  00000000  0005a471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000e3b1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003148  00000000  00000000  000e3b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	0800370c 	.word	0x0800370c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	0800370c 	.word	0x0800370c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <SetSymbol>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SetSymbol(uint16_t digs)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	80fb      	strh	r3, [r7, #6]
    GPIOB->BSRR = ~digs;
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	43da      	mvns	r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <SetSymbol+0x24>)
 8000658:	611a      	str	r2, [r3, #16]
    GPIOB->BSRR = (uint32_t)digs << 16u;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	4a03      	ldr	r2, [pc, #12]	; (800066c <SetSymbol+0x24>)
 800065e:	041b      	lsls	r3, r3, #16
 8000660:	6113      	str	r3, [r2, #16]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40010c00 	.word	0x40010c00

08000670 <FloatIntTranslation>:

void FloatIntTranslation(uint16_t adcValue)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	80fb      	strh	r3, [r7, #6]
    // Преобразование значения АЦП в вольты
	float voltage = (adcValue * 1.65f / 4095.0f);
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fe1f 	bl	80002c0 <__aeabi_i2f>
 8000682:	4603      	mov	r3, r0
 8000684:	4936      	ldr	r1, [pc, #216]	; (8000760 <FloatIntTranslation+0xf0>)
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fe6e 	bl	8000368 <__aeabi_fmul>
 800068c:	4603      	mov	r3, r0
 800068e:	4935      	ldr	r1, [pc, #212]	; (8000764 <FloatIntTranslation+0xf4>)
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff1d 	bl	80004d0 <__aeabi_fdiv>
 8000696:	4603      	mov	r3, r0
 8000698:	60fb      	str	r3, [r7, #12]

    uint8_t a = (uint8_t)voltage;
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f7ff ffb4 	bl	8000608 <__aeabi_f2uiz>
 80006a0:	4603      	mov	r3, r0
 80006a2:	72fb      	strb	r3, [r7, #11]
    uint8_t b = (uint8_t)(voltage * 10) - (a * 10);
 80006a4:	4930      	ldr	r1, [pc, #192]	; (8000768 <FloatIntTranslation+0xf8>)
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f7ff fe5e 	bl	8000368 <__aeabi_fmul>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ffaa 	bl	8000608 <__aeabi_f2uiz>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	7afb      	ldrb	r3, [r7, #11]
 80006ba:	4619      	mov	r1, r3
 80006bc:	0149      	lsls	r1, r1, #5
 80006be:	1ac9      	subs	r1, r1, r3
 80006c0:	0089      	lsls	r1, r1, #2
 80006c2:	1acb      	subs	r3, r1, r3
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4413      	add	r3, r2
 80006ca:	72bb      	strb	r3, [r7, #10]
    uint8_t c = (uint8_t)(voltage * 100) - ((uint8_t)(voltage * 10)) * 10;
 80006cc:	4927      	ldr	r1, [pc, #156]	; (800076c <FloatIntTranslation+0xfc>)
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f7ff fe4a 	bl	8000368 <__aeabi_fmul>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff96 	bl	8000608 <__aeabi_f2uiz>
 80006dc:	4603      	mov	r3, r0
 80006de:	b2dc      	uxtb	r4, r3
 80006e0:	4921      	ldr	r1, [pc, #132]	; (8000768 <FloatIntTranslation+0xf8>)
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f7ff fe40 	bl	8000368 <__aeabi_fmul>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff8c 	bl	8000608 <__aeabi_f2uiz>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	461a      	mov	r2, r3
 80006f6:	0152      	lsls	r2, r2, #5
 80006f8:	1ad2      	subs	r2, r2, r3
 80006fa:	0092      	lsls	r2, r2, #2
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4423      	add	r3, r4
 8000704:	727b      	strb	r3, [r7, #9]
    uint8_t d = (uint8_t)(voltage * 1000) - ((uint8_t)(voltage * 100)) * 10;
 8000706:	491a      	ldr	r1, [pc, #104]	; (8000770 <FloatIntTranslation+0x100>)
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	f7ff fe2d 	bl	8000368 <__aeabi_fmul>
 800070e:	4603      	mov	r3, r0
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff79 	bl	8000608 <__aeabi_f2uiz>
 8000716:	4603      	mov	r3, r0
 8000718:	b2dc      	uxtb	r4, r3
 800071a:	4914      	ldr	r1, [pc, #80]	; (800076c <FloatIntTranslation+0xfc>)
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f7ff fe23 	bl	8000368 <__aeabi_fmul>
 8000722:	4603      	mov	r3, r0
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff6f 	bl	8000608 <__aeabi_f2uiz>
 800072a:	4603      	mov	r3, r0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	461a      	mov	r2, r3
 8000730:	0152      	lsls	r2, r2, #5
 8000732:	1ad2      	subs	r2, r2, r3
 8000734:	0092      	lsls	r2, r2, #2
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4423      	add	r3, r4
 800073e:	723b      	strb	r3, [r7, #8]

    value[0] = a;
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <FloatIntTranslation+0x104>)
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	7013      	strb	r3, [r2, #0]
    value[1] = b;
 8000746:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <FloatIntTranslation+0x104>)
 8000748:	7abb      	ldrb	r3, [r7, #10]
 800074a:	7053      	strb	r3, [r2, #1]
    value[2] = c;
 800074c:	4a09      	ldr	r2, [pc, #36]	; (8000774 <FloatIntTranslation+0x104>)
 800074e:	7a7b      	ldrb	r3, [r7, #9]
 8000750:	7093      	strb	r3, [r2, #2]
    value[3] = d;
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <FloatIntTranslation+0x104>)
 8000754:	7a3b      	ldrb	r3, [r7, #8]
 8000756:	70d3      	strb	r3, [r2, #3]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	3fd33333 	.word	0x3fd33333
 8000764:	457ff000 	.word	0x457ff000
 8000768:	41200000 	.word	0x41200000
 800076c:	42c80000 	.word	0x42c80000
 8000770:	447a0000 	.word	0x447a0000
 8000774:	20000048 	.word	0x20000048

08000778 <Symbol>:



void Symbol()
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    if (i == 4) {
 800077c:	4b27      	ldr	r3, [pc, #156]	; (800081c <Symbol+0xa4>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b04      	cmp	r3, #4
 8000782:	d102      	bne.n	800078a <Symbol+0x12>
        i = 0;
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <Symbol+0xa4>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
    }

    if (tmp == 4) {
 800078a:	4b25      	ldr	r3, [pc, #148]	; (8000820 <Symbol+0xa8>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b04      	cmp	r3, #4
 8000790:	d102      	bne.n	8000798 <Symbol+0x20>
        tmp = 0;
 8000792:	4b23      	ldr	r3, [pc, #140]	; (8000820 <Symbol+0xa8>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
    }

    if (i == 0) {
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <Symbol+0xa4>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10f      	bne.n	80007c0 <Symbol+0x48>
        y = digs[value[tmp]] | sDP;
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <Symbol+0xa8>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <Symbol+0xac>)
 80007a8:	5c9b      	ldrb	r3, [r3, r2]
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <Symbol+0xb0>)
 80007ae:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <Symbol+0xb4>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <Symbol+0xb8>)
 80007bc:	801a      	strh	r2, [r3, #0]
 80007be:	e00a      	b.n	80007d6 <Symbol+0x5e>
    } else {
        y = digs[value[tmp]];
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <Symbol+0xa8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <Symbol+0xac>)
 80007c8:	5c9b      	ldrb	r3, [r3, r2]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <Symbol+0xb0>)
 80007ce:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <Symbol+0xb8>)
 80007d4:	801a      	strh	r2, [r3, #0]
    }

    y = y | (pointposition1[i] << 8);
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <Symbol+0xa4>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <Symbol+0xbc>)
 80007de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <Symbol+0xb8>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <Symbol+0xb8>)
 80007f4:	801a      	strh	r2, [r3, #0]

    SetSymbol(y);
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <Symbol+0xb8>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff24 	bl	8000648 <SetSymbol>

    i++;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <Symbol+0xa4>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <Symbol+0xa4>)
 800080a:	701a      	strb	r2, [r3, #0]
    tmp++;
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <Symbol+0xa8>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b02      	ldr	r3, [pc, #8]	; (8000820 <Symbol+0xa8>)
 8000816:	701a      	strb	r2, [r3, #0]
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000041 	.word	0x20000041
 8000820:	20000042 	.word	0x20000042
 8000824:	20000048 	.word	0x20000048
 8000828:	20000250 	.word	0x20000250
 800082c:	2000000e 	.word	0x2000000e
 8000830:	20000044 	.word	0x20000044
 8000834:	20000010 	.word	0x20000010

08000838 <sqrt1>:

int16_t sqrt1(uint32_t L)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    if(L < 2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d802      	bhi.n	800084c <sqrt1+0x14>
        return (uint16_t) L;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	b21b      	sxth	r3, r3
 800084a:	e015      	b.n	8000878 <sqrt1+0x40>

    uint32_t rslt, div;

    rslt = L;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	60fb      	str	r3, [r7, #12]
    div = L / 2;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	085b      	lsrs	r3, r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
    while(1)
    {
        div = (L / div + div) / 2;
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	fbb2 f2f3 	udiv	r2, r2, r3
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	4413      	add	r3, r2
 8000862:	085b      	lsrs	r3, r3, #1
 8000864:	60bb      	str	r3, [r7, #8]

        if(rslt > div)
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	429a      	cmp	r2, r3
 800086c:	d902      	bls.n	8000874 <sqrt1+0x3c>
            rslt = div;
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e7f0      	b.n	8000856 <sqrt1+0x1e>
        else
            return (uint16_t) rslt;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	b21b      	sxth	r3, r3
    }
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <CalculateRMS>:

float CalculateRMS(uint16_t *values, uint16_t size)
{
 8000882:	b590      	push	{r4, r7, lr}
 8000884:	b087      	sub	sp, #28
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	807b      	strh	r3, [r7, #2]
    uint32_t sum = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
    for (uint16_t i = 0; i < size; i++) {
 8000892:	2300      	movs	r3, #0
 8000894:	827b      	strh	r3, [r7, #18]
 8000896:	e013      	b.n	80008c0 <CalculateRMS+0x3e>
        sum += values[i] * values[i];
 8000898:	8a7b      	ldrh	r3, [r7, #18]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	4413      	add	r3, r2
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	4619      	mov	r1, r3
 80008a4:	8a7b      	ldrh	r3, [r7, #18]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	fb03 f301 	mul.w	r3, r3, r1
 80008b2:	461a      	mov	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	4413      	add	r3, r2
 80008b8:	617b      	str	r3, [r7, #20]
    for (uint16_t i = 0; i < size; i++) {
 80008ba:	8a7b      	ldrh	r3, [r7, #18]
 80008bc:	3301      	adds	r3, #1
 80008be:	827b      	strh	r3, [r7, #18]
 80008c0:	8a7a      	ldrh	r2, [r7, #18]
 80008c2:	887b      	ldrh	r3, [r7, #2]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d3e7      	bcc.n	8000898 <CalculateRMS+0x16>
    }
    float mean = (float)sum / size;
 80008c8:	6978      	ldr	r0, [r7, #20]
 80008ca:	f7ff fcf5 	bl	80002b8 <__aeabi_ui2f>
 80008ce:	4604      	mov	r4, r0
 80008d0:	887b      	ldrh	r3, [r7, #2]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fcf4 	bl	80002c0 <__aeabi_i2f>
 80008d8:	4603      	mov	r3, r0
 80008da:	4619      	mov	r1, r3
 80008dc:	4620      	mov	r0, r4
 80008de:	f7ff fdf7 	bl	80004d0 <__aeabi_fdiv>
 80008e2:	4603      	mov	r3, r0
 80008e4:	60fb      	str	r3, [r7, #12]
    return sqrt1(mean);
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f7ff fe8e 	bl	8000608 <__aeabi_f2uiz>
 80008ec:	4603      	mov	r3, r0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ffa2 	bl	8000838 <sqrt1>
 80008f4:	4603      	mov	r3, r0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fce2 	bl	80002c0 <__aeabi_i2f>
 80008fc:	4603      	mov	r3, r0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	371c      	adds	r7, #28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd90      	pop	{r4, r7, pc}
	...

08000908 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a09      	ldr	r2, [pc, #36]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d101      	bne.n	800091c <HAL_TIM_PeriodElapsedCallback+0x14>
	        Symbol();
 8000918:	f7ff ff2e 	bl	8000778 <Symbol>
	    }

	if (htim == &htim3) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d105      	bne.n	8000930 <HAL_TIM_PeriodElapsedCallback+0x28>
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcValues[0], 256);
 8000924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000928:	4905      	ldr	r1, [pc, #20]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800092c:	f000 fde0 	bl	80014f0 <HAL_ADC_Start_DMA>
    }
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000320 	.word	0x20000320
 800093c:	20000264 	.word	0x20000264
 8000940:	20000050 	.word	0x20000050
 8000944:	200002ac 	.word	0x200002ac

08000948 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a05      	ldr	r2, [pc, #20]	; (800096c <HAL_ADC_ConvCpltCallback+0x24>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d102      	bne.n	8000960 <HAL_ADC_ConvCpltCallback+0x18>
        adcFull = 1;
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_ADC_ConvCpltCallback+0x28>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
    }
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40012400 	.word	0x40012400
 8000970:	20000040 	.word	0x20000040

08000974 <countPeriods>:

//функция подсчёта периодов
uint16_t countPeriods(uint16_t adcValues[], uint16_t length) {
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	807b      	strh	r3, [r7, #2]

    uint16_t perCount = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	81fb      	strh	r3, [r7, #14]
    bool wasPos = (adcValues[0] >= 1.65 * 4095 / 3.3); // Начальное состояние
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800098c:	4293      	cmp	r3, r2
 800098e:	bf8c      	ite	hi
 8000990:	2301      	movhi	r3, #1
 8000992:	2300      	movls	r3, #0
 8000994:	737b      	strb	r3, [r7, #13]
    bool flag = false;                                 // Флаг для отслеживания пересечения через 1.65 В
 8000996:	2300      	movs	r3, #0
 8000998:	733b      	strb	r3, [r7, #12]

    for (uint16_t i = 1; i < length; i++) {
 800099a:	2301      	movs	r3, #1
 800099c:	817b      	strh	r3, [r7, #10]
 800099e:	e022      	b.n	80009e6 <countPeriods+0x72>
        bool isPos = (adcValues[i] >= 1.65 * 4095 / 3.3);
 80009a0:	897b      	ldrh	r3, [r7, #10]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80009ae:	4293      	cmp	r3, r2
 80009b0:	bf8c      	ite	hi
 80009b2:	2301      	movhi	r3, #1
 80009b4:	2300      	movls	r3, #0
 80009b6:	727b      	strb	r3, [r7, #9]

        // Проверяем пересечение через 1.65 В
        if (wasPos != isPos) {
 80009b8:	7b7a      	ldrb	r2, [r7, #13]
 80009ba:	7a7b      	ldrb	r3, [r7, #9]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d002      	beq.n	80009c6 <countPeriods+0x52>
            flag = true;
 80009c0:	2301      	movs	r3, #1
 80009c2:	733b      	strb	r3, [r7, #12]
 80009c4:	e00a      	b.n	80009dc <countPeriods+0x68>
        } else if (flag && isPos) {
 80009c6:	7b3b      	ldrb	r3, [r7, #12]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d007      	beq.n	80009dc <countPeriods+0x68>
 80009cc:	7a7b      	ldrb	r3, [r7, #9]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d004      	beq.n	80009dc <countPeriods+0x68>
            // Пересечение через 1.65 В произошло и текущее значение положительное
            perCount++;
 80009d2:	89fb      	ldrh	r3, [r7, #14]
 80009d4:	3301      	adds	r3, #1
 80009d6:	81fb      	strh	r3, [r7, #14]
            flag = false;
 80009d8:	2300      	movs	r3, #0
 80009da:	733b      	strb	r3, [r7, #12]
        }

        wasPos = isPos;
 80009dc:	7a7b      	ldrb	r3, [r7, #9]
 80009de:	737b      	strb	r3, [r7, #13]
    for (uint16_t i = 1; i < length; i++) {
 80009e0:	897b      	ldrh	r3, [r7, #10]
 80009e2:	3301      	adds	r3, #1
 80009e4:	817b      	strh	r3, [r7, #10]
 80009e6:	897a      	ldrh	r2, [r7, #10]
 80009e8:	887b      	ldrh	r3, [r7, #2]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d3d8      	bcc.n	80009a0 <countPeriods+0x2c>
    }

    return perCount;
 80009ee:	89fb      	ldrh	r3, [r7, #14]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
	...

080009fc <ChangeTIM3Prescaler>:


// Функция для изменения предделителя таймера htim3
void ChangeTIM3Prescaler(uint32_t newPrescaler)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

    // Останавливаем таймер перед изменением предделителя
    __HAL_TIM_DISABLE(&htim3);
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <ChangeTIM3Prescaler+0x5c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6a1a      	ldr	r2, [r3, #32]
 8000a0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8000a0e:	4013      	ands	r3, r2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d10f      	bne.n	8000a34 <ChangeTIM3Prescaler+0x38>
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <ChangeTIM3Prescaler+0x5c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6a1a      	ldr	r2, [r3, #32]
 8000a1a:	f240 4344 	movw	r3, #1092	; 0x444
 8000a1e:	4013      	ands	r3, r2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d107      	bne.n	8000a34 <ChangeTIM3Prescaler+0x38>
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <ChangeTIM3Prescaler+0x5c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <ChangeTIM3Prescaler+0x5c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f022 0201 	bic.w	r2, r2, #1
 8000a32:	601a      	str	r2, [r3, #0]

    // Изменяем значение предделителя
    __HAL_TIM_SET_PRESCALER(&htim3, newPrescaler - 1);
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <ChangeTIM3Prescaler+0x5c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	3a01      	subs	r2, #1
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28

    // Запускаем таймер снова
    __HAL_TIM_ENABLE(&htim3);
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <ChangeTIM3Prescaler+0x5c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <ChangeTIM3Prescaler+0x5c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f042 0201 	orr.w	r2, r2, #1
 8000a4c:	601a      	str	r2, [r3, #0]


}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	20000264 	.word	0x20000264

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a62:	f000 fc0b 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a66:	f000 f91f 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6a:	f000 fa63 	bl	8000f34 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a6e:	f000 f9ab 	bl	8000dc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a72:	f000 f9f5 	bl	8000e60 <MX_TIM3_Init>
  MX_DMA_Init();
 8000a76:	f000 fa3f 	bl	8000ef8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a7a:	f000 f967 	bl	8000d4c <MX_ADC1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  digs[0] = sA | sB | sC | sD | sE | sF;
 8000a7e:	4b7d      	ldr	r3, [pc, #500]	; (8000c74 <main+0x218>)
 8000a80:	881a      	ldrh	r2, [r3, #0]
 8000a82:	4b7d      	ldr	r3, [pc, #500]	; (8000c78 <main+0x21c>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	4b7c      	ldr	r3, [pc, #496]	; (8000c7c <main+0x220>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4b7b      	ldr	r3, [pc, #492]	; (8000c80 <main+0x224>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	4b7a      	ldr	r3, [pc, #488]	; (8000c84 <main+0x228>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	4b79      	ldr	r3, [pc, #484]	; (8000c88 <main+0x22c>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	4b78      	ldr	r3, [pc, #480]	; (8000c8c <main+0x230>)
 8000aac:	801a      	strh	r2, [r3, #0]
  digs[1] = sB | sC;
 8000aae:	4b72      	ldr	r3, [pc, #456]	; (8000c78 <main+0x21c>)
 8000ab0:	881a      	ldrh	r2, [r3, #0]
 8000ab2:	4b72      	ldr	r3, [pc, #456]	; (8000c7c <main+0x220>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	4b74      	ldr	r3, [pc, #464]	; (8000c8c <main+0x230>)
 8000abc:	805a      	strh	r2, [r3, #2]
  digs[2] = sA | sB | sD | sE | sG;
 8000abe:	4b6d      	ldr	r3, [pc, #436]	; (8000c74 <main+0x218>)
 8000ac0:	881a      	ldrh	r2, [r3, #0]
 8000ac2:	4b6d      	ldr	r3, [pc, #436]	; (8000c78 <main+0x21c>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	4b6d      	ldr	r3, [pc, #436]	; (8000c80 <main+0x224>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	4b6c      	ldr	r3, [pc, #432]	; (8000c84 <main+0x228>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b6d      	ldr	r3, [pc, #436]	; (8000c90 <main+0x234>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	4b6a      	ldr	r3, [pc, #424]	; (8000c8c <main+0x230>)
 8000ae4:	809a      	strh	r2, [r3, #4]
  digs[3] = sA | sB | sC | sD | sG;
 8000ae6:	4b63      	ldr	r3, [pc, #396]	; (8000c74 <main+0x218>)
 8000ae8:	881a      	ldrh	r2, [r3, #0]
 8000aea:	4b63      	ldr	r3, [pc, #396]	; (8000c78 <main+0x21c>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b62      	ldr	r3, [pc, #392]	; (8000c7c <main+0x220>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	4b61      	ldr	r3, [pc, #388]	; (8000c80 <main+0x224>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b63      	ldr	r3, [pc, #396]	; (8000c90 <main+0x234>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	4b60      	ldr	r3, [pc, #384]	; (8000c8c <main+0x230>)
 8000b0c:	80da      	strh	r2, [r3, #6]
  digs[4] = sB | sC | sF | sG;
 8000b0e:	4b5a      	ldr	r3, [pc, #360]	; (8000c78 <main+0x21c>)
 8000b10:	881a      	ldrh	r2, [r3, #0]
 8000b12:	4b5a      	ldr	r3, [pc, #360]	; (8000c7c <main+0x220>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	4b5b      	ldr	r3, [pc, #364]	; (8000c88 <main+0x22c>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	4b5b      	ldr	r3, [pc, #364]	; (8000c90 <main+0x234>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	4b58      	ldr	r3, [pc, #352]	; (8000c8c <main+0x230>)
 8000b2c:	811a      	strh	r2, [r3, #8]
  digs[5] = sA | sC | sD | sF | sG;
 8000b2e:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <main+0x218>)
 8000b30:	881a      	ldrh	r2, [r3, #0]
 8000b32:	4b52      	ldr	r3, [pc, #328]	; (8000c7c <main+0x220>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	4b51      	ldr	r3, [pc, #324]	; (8000c80 <main+0x224>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b51      	ldr	r3, [pc, #324]	; (8000c88 <main+0x22c>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b51      	ldr	r3, [pc, #324]	; (8000c90 <main+0x234>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	4b4e      	ldr	r3, [pc, #312]	; (8000c8c <main+0x230>)
 8000b54:	815a      	strh	r2, [r3, #10]
  digs[6] = sA | sC | sD | sE | sF | sG;
 8000b56:	4b47      	ldr	r3, [pc, #284]	; (8000c74 <main+0x218>)
 8000b58:	881a      	ldrh	r2, [r3, #0]
 8000b5a:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <main+0x220>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b47      	ldr	r3, [pc, #284]	; (8000c80 <main+0x224>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	4b46      	ldr	r3, [pc, #280]	; (8000c84 <main+0x228>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <main+0x22c>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	4b45      	ldr	r3, [pc, #276]	; (8000c90 <main+0x234>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <main+0x230>)
 8000b84:	819a      	strh	r2, [r3, #12]
  digs[7] = sA | sB | sC;
 8000b86:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <main+0x218>)
 8000b88:	881a      	ldrh	r2, [r3, #0]
 8000b8a:	4b3b      	ldr	r3, [pc, #236]	; (8000c78 <main+0x21c>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	4b3a      	ldr	r3, [pc, #232]	; (8000c7c <main+0x220>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b3c      	ldr	r3, [pc, #240]	; (8000c8c <main+0x230>)
 8000b9c:	81da      	strh	r2, [r3, #14]
  digs[8] = sA | sB | sC | sD | sE | sF | sG;
 8000b9e:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <main+0x218>)
 8000ba0:	881a      	ldrh	r2, [r3, #0]
 8000ba2:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <main+0x21c>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	4b34      	ldr	r3, [pc, #208]	; (8000c7c <main+0x220>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b33      	ldr	r3, [pc, #204]	; (8000c80 <main+0x224>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <main+0x228>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <main+0x22c>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <main+0x234>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <main+0x230>)
 8000bd4:	821a      	strh	r2, [r3, #16]
  digs[9] = sA | sB | sC | sD | sF | sG;
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <main+0x218>)
 8000bd8:	881a      	ldrh	r2, [r3, #0]
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <main+0x21c>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <main+0x220>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <main+0x224>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <main+0x22c>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <main+0x234>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <main+0x230>)
 8000c04:	825a      	strh	r2, [r3, #18]

  HAL_TIM_Base_Start_IT(&htim2);
 8000c06:	4823      	ldr	r0, [pc, #140]	; (8000c94 <main+0x238>)
 8000c08:	f002 f9a6 	bl	8002f58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000c0c:	4822      	ldr	r0, [pc, #136]	; (8000c98 <main+0x23c>)
 8000c0e:	f002 f9a3 	bl	8002f58 <HAL_TIM_Base_Start_IT>
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if (adcFull) {
 8000c12:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <main+0x240>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0fb      	beq.n	8000c12 <main+0x1b6>
        adcFull = 0;
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <main+0x240>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
        float rms = CalculateRMS(adcValues, 256);
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	481e      	ldr	r0, [pc, #120]	; (8000ca0 <main+0x244>)
 8000c26:	f7ff fe2c 	bl	8000882 <CalculateRMS>
 8000c2a:	6078      	str	r0, [r7, #4]
        rmsValue = (uint16_t)(rms);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fceb 	bl	8000608 <__aeabi_f2uiz>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <main+0x248>)
 8000c38:	801a      	strh	r2, [r3, #0]
        FloatIntTranslation(rmsValue);
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <main+0x248>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fd16 	bl	8000670 <FloatIntTranslation>

        // Проверка количества периодов
        uint16_t perCount = countPeriods(adcValues, 256);
 8000c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c48:	4815      	ldr	r0, [pc, #84]	; (8000ca0 <main+0x244>)
 8000c4a:	f7ff fe93 	bl	8000974 <countPeriods>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	807b      	strh	r3, [r7, #2]

        if (perCount < 20)
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	2b13      	cmp	r3, #19
 8000c56:	d804      	bhi.n	8000c62 <main+0x206>
         {
           // Увеличить частоту дискретизации
           ChangeTIM3Prescaler(300); // Уменьшение предделителя
 8000c58:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c5c:	f7ff fece 	bl	80009fc <ChangeTIM3Prescaler>
 8000c60:	e7d7      	b.n	8000c12 <main+0x1b6>
         }
         else if (perCount > 50)
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	2b32      	cmp	r3, #50	; 0x32
 8000c66:	d9d4      	bls.n	8000c12 <main+0x1b6>
         {
           // Уменьшить частоту дискретизации
           ChangeTIM3Prescaler(1600); // Увеличение предделителя
 8000c68:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8000c6c:	f7ff fec6 	bl	80009fc <ChangeTIM3Prescaler>
    if (adcFull) {
 8000c70:	e7cf      	b.n	8000c12 <main+0x1b6>
 8000c72:	bf00      	nop
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000002 	.word	0x20000002
 8000c7c:	20000004 	.word	0x20000004
 8000c80:	20000006 	.word	0x20000006
 8000c84:	20000008 	.word	0x20000008
 8000c88:	2000000a 	.word	0x2000000a
 8000c8c:	20000250 	.word	0x20000250
 8000c90:	2000000c 	.word	0x2000000c
 8000c94:	20000320 	.word	0x20000320
 8000c98:	20000264 	.word	0x20000264
 8000c9c:	20000040 	.word	0x20000040
 8000ca0:	20000050 	.word	0x20000050
 8000ca4:	2000004c 	.word	0x2000004c

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	; 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb2:	2228      	movs	r2, #40	; 0x28
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f002 fd20 	bl	80036fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cec:	4618      	mov	r0, r3
 8000cee:	f001 fc51 	bl	8002594 <HAL_RCC_OscConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000cf8:	f000 f95c 	bl	8000fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 febc 	bl	8002a94 <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d22:	f000 f947 	bl	8000fb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d26:	2302      	movs	r3, #2
 8000d28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000d2a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d2e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 f80a 	bl	8002d4c <HAL_RCCEx_PeriphCLKConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d3e:	f000 f939 	bl	8000fb4 <Error_Handler>
  }
}
 8000d42:	bf00      	nop
 8000d44:	3750      	adds	r7, #80	; 0x50
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_ADC1_Init+0x74>)
 8000d5e:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <MX_ADC1_Init+0x78>)
 8000d60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_ADC1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_ADC1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_ADC1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_ADC1_Init+0x74>)
 8000d76:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_ADC1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_ADC1_Init+0x74>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <MX_ADC1_Init+0x74>)
 8000d8a:	f000 fad9 	bl	8001340 <HAL_ADC_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d94:	f000 f90e 	bl	8000fb4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_ADC1_Init+0x74>)
 8000daa:	f000 fd59 	bl	8001860 <HAL_ADC_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000db4:	f000 f8fe 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200002ac 	.word	0x200002ac
 8000dc4:	40012400 	.word	0x40012400

08000dc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <MX_TIM2_Init+0x94>)
 8000de6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_TIM2_Init+0x94>)
 8000dee:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000df2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <MX_TIM2_Init+0x94>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_TIM2_Init+0x94>)
 8000dfc:	2264      	movs	r2, #100	; 0x64
 8000dfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <MX_TIM2_Init+0x94>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_TIM2_Init+0x94>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e0c:	4813      	ldr	r0, [pc, #76]	; (8000e5c <MX_TIM2_Init+0x94>)
 8000e0e:	f002 f853 	bl	8002eb8 <HAL_TIM_Base_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e18:	f000 f8cc 	bl	8000fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	4619      	mov	r1, r3
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <MX_TIM2_Init+0x94>)
 8000e2a:	f002 f9ef 	bl	800320c <HAL_TIM_ConfigClockSource>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e34:	f000 f8be 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e38:	2320      	movs	r3, #32
 8000e3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e40:	463b      	mov	r3, r7
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_TIM2_Init+0x94>)
 8000e46:	f002 fbc5 	bl	80035d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e50:	f000 f8b0 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000320 	.word	0x20000320

08000e60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <MX_TIM3_Init+0x90>)
 8000e7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <MX_TIM3_Init+0x94>)
 8000e80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80; // Умееьшить значение предделителя для увеличения частоты дискретизации
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <MX_TIM3_Init+0x90>)
 8000e84:	2250      	movs	r2, #80	; 0x50
 8000e86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <MX_TIM3_Init+0x90>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_TIM3_Init+0x90>)
 8000e90:	2264      	movs	r2, #100	; 0x64
 8000e92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <MX_TIM3_Init+0x90>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_TIM3_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ea0:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <MX_TIM3_Init+0x90>)
 8000ea2:	f002 f809 	bl	8002eb8 <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000eac:	f000 f882 	bl	8000fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <MX_TIM3_Init+0x90>)
 8000ebe:	f002 f9a5 	bl	800320c <HAL_TIM_ConfigClockSource>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000ec8:	f000 f874 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ecc:	2320      	movs	r3, #32
 8000ece:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_TIM3_Init+0x90>)
 8000eda:	f002 fb7b 	bl	80035d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000ee4:	f000 f866 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000264 	.word	0x20000264
 8000ef4:	40000400 	.word	0x40000400

08000ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_DMA_Init+0x38>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <MX_DMA_Init+0x38>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_DMA_Init+0x38>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	200b      	movs	r0, #11
 8000f1c:	f000 ff79 	bl	8001e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f20:	200b      	movs	r0, #11
 8000f22:	f000 ff92 	bl	8001e4a <HAL_NVIC_EnableIRQ>

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_GPIO_Init+0x78>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a17      	ldr	r2, [pc, #92]	; (8000fac <MX_GPIO_Init+0x78>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_GPIO_Init+0x78>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_GPIO_Init+0x78>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a11      	ldr	r2, [pc, #68]	; (8000fac <MX_GPIO_Init+0x78>)
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_GPIO_Init+0x78>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <MX_GPIO_Init+0x7c>)
 8000f80:	f001 faf0 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f88:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2302      	movs	r3, #2
 8000f94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_GPIO_Init+0x7c>)
 8000f9e:	f001 f95d 	bl	800225c <HAL_GPIO_Init>

}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010c00 	.word	0x40010c00

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
}
 8000fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <Error_Handler+0x8>
	...

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_MspInit+0x5c>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4a14      	ldr	r2, [pc, #80]	; (800101c <HAL_MspInit+0x5c>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6193      	str	r3, [r2, #24]
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_MspInit+0x5c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x5c>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x5c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x5c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_MspInit+0x60>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_MspInit+0x60>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000

08001024 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a2c      	ldr	r2, [pc, #176]	; (80010f0 <HAL_ADC_MspInit+0xcc>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d151      	bne.n	80010e8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <HAL_ADC_MspInit+0xd0>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a2a      	ldr	r2, [pc, #168]	; (80010f4 <HAL_ADC_MspInit+0xd0>)
 800104a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_ADC_MspInit+0xd0>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_ADC_MspInit+0xd0>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a24      	ldr	r2, [pc, #144]	; (80010f4 <HAL_ADC_MspInit+0xd0>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <HAL_ADC_MspInit+0xd0>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001078:	2303      	movs	r3, #3
 800107a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4619      	mov	r1, r3
 8001082:	481d      	ldr	r0, [pc, #116]	; (80010f8 <HAL_ADC_MspInit+0xd4>)
 8001084:	f001 f8ea 	bl	800225c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 800108a:	4a1d      	ldr	r2, [pc, #116]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 800108c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 80010a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 80010aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010bc:	480f      	ldr	r0, [pc, #60]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 80010be:	f000 fedf 	bl	8001e80 <HAL_DMA_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80010c8:	f7ff ff74 	bl	8000fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 80010d0:	621a      	str	r2, [r3, #32]
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	210a      	movs	r1, #10
 80010dc:	2012      	movs	r0, #18
 80010de:	f000 fe98 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010e2:	2012      	movs	r0, #18
 80010e4:	f000 feb1 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40012400 	.word	0x40012400
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010800 	.word	0x40010800
 80010fc:	200002dc 	.word	0x200002dc
 8001100:	40020008 	.word	0x40020008

08001104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001114:	d114      	bne.n	8001140 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_TIM_Base_MspInit+0x78>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_TIM_Base_MspInit+0x78>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_TIM_Base_MspInit+0x78>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 12, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	210c      	movs	r1, #12
 8001132:	201c      	movs	r0, #28
 8001134:	f000 fe6d 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001138:	201c      	movs	r0, #28
 800113a:	f000 fe86 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800113e:	e018      	b.n	8001172 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_TIM_Base_MspInit+0x7c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d113      	bne.n	8001172 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_TIM_Base_MspInit+0x78>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <HAL_TIM_Base_MspInit+0x78>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	61d3      	str	r3, [r2, #28]
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_TIM_Base_MspInit+0x78>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 11, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	210b      	movs	r1, #11
 8001166:	201d      	movs	r0, #29
 8001168:	f000 fe53 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800116c:	201d      	movs	r0, #29
 800116e:	f000 fe6c 	bl	8001e4a <HAL_NVIC_EnableIRQ>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	40000400 	.word	0x40000400

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ca:	f000 f89d 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <DMA1_Channel1_IRQHandler+0x10>)
 80011da:	f000 ff0b 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200002dc 	.word	0x200002dc

080011e8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <ADC1_2_IRQHandler+0x10>)
 80011ee:	f000 fa5d 	bl	80016ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200002ac 	.word	0x200002ac

080011fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <TIM2_IRQHandler+0x10>)
 8001202:	f001 fefb 	bl	8002ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000320 	.word	0x20000320

08001210 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM3_IRQHandler+0x10>)
 8001216:	f001 fef1 	bl	8002ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000264 	.word	0x20000264

08001224 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001230:	f7ff fff8 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001236:	490c      	ldr	r1, [pc, #48]	; (8001268 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001238:	4a0c      	ldr	r2, [pc, #48]	; (800126c <LoopFillZerobss+0x16>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800124c:	4c09      	ldr	r4, [pc, #36]	; (8001274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800125a:	f002 fa2b 	bl	80036b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800125e:	f7ff fbfd 	bl	8000a5c <main>
  bx lr
 8001262:	4770      	bx	lr
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800126c:	08003750 	.word	0x08003750
  ldr r2, =_sbss
 8001270:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001274:	2000036c 	.word	0x2000036c

08001278 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <CAN1_RX1_IRQHandler>
	...

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_Init+0x28>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <HAL_Init+0x28>)
 8001286:	f043 0310 	orr.w	r3, r3, #16
 800128a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128c:	2003      	movs	r0, #3
 800128e:	f000 fdb5 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001292:	200f      	movs	r0, #15
 8001294:	f000 f808 	bl	80012a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff fe92 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40022000 	.word	0x40022000

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x54>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x58>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fdcd 	bl	8001e66 <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00e      	b.n	80012f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d80a      	bhi.n	80012f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f000 fd95 	bl	8001e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_InitTick+0x5c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000018 	.word	0x20000018
 8001300:	20000020 	.word	0x20000020
 8001304:	2000001c 	.word	0x2000001c

08001308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_IncTick+0x1c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_IncTick+0x20>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a03      	ldr	r2, [pc, #12]	; (8001328 <HAL_IncTick+0x20>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000020 	.word	0x20000020
 8001328:	20000368 	.word	0x20000368

0800132c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b02      	ldr	r3, [pc, #8]	; (800133c <HAL_GetTick+0x10>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	20000368 	.word	0x20000368

08001340 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e0be      	b.n	80014e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	2b00      	cmp	r3, #0
 800136e:	d109      	bne.n	8001384 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fe50 	bl	8001024 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fbbd 	bl	8001b04 <ADC_ConversionStop_Disable>
 800138a:	4603      	mov	r3, r0
 800138c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	f040 8099 	bne.w	80014ce <HAL_ADC_Init+0x18e>
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 8095 	bne.w	80014ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ac:	f023 0302 	bic.w	r3, r3, #2
 80013b0:	f043 0202 	orr.w	r2, r3, #2
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7b1b      	ldrb	r3, [r3, #12]
 80013c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013d8:	d003      	beq.n	80013e2 <HAL_ADC_Init+0xa2>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d102      	bne.n	80013e8 <HAL_ADC_Init+0xa8>
 80013e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e6:	e000      	b.n	80013ea <HAL_ADC_Init+0xaa>
 80013e8:	2300      	movs	r3, #0
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7d1b      	ldrb	r3, [r3, #20]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d119      	bne.n	800142c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7b1b      	ldrb	r3, [r3, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d109      	bne.n	8001414 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	3b01      	subs	r3, #1
 8001406:	035a      	lsls	r2, r3, #13
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	e00b      	b.n	800142c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	f043 0220 	orr.w	r2, r3, #32
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	f043 0201 	orr.w	r2, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	430a      	orrs	r2, r1
 800143e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <HAL_ADC_Init+0x1a8>)
 8001448:	4013      	ands	r3, r2
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	68b9      	ldr	r1, [r7, #8]
 8001450:	430b      	orrs	r3, r1
 8001452:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800145c:	d003      	beq.n	8001466 <HAL_ADC_Init+0x126>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d104      	bne.n	8001470 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	3b01      	subs	r3, #1
 800146c:	051b      	lsls	r3, r3, #20
 800146e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001476:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	430a      	orrs	r2, r1
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <HAL_ADC_Init+0x1ac>)
 800148c:	4013      	ands	r3, r2
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	429a      	cmp	r2, r3
 8001492:	d10b      	bne.n	80014ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	f023 0303 	bic.w	r3, r3, #3
 80014a2:	f043 0201 	orr.w	r2, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014aa:	e018      	b.n	80014de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	f023 0312 	bic.w	r3, r3, #18
 80014b4:	f043 0210 	orr.w	r2, r3, #16
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014cc:	e007      	b.n	80014de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	f043 0210 	orr.w	r2, r3, #16
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014de:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	ffe1f7fd 	.word	0xffe1f7fd
 80014ec:	ff1f0efe 	.word	0xff1f0efe

080014f0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a64      	ldr	r2, [pc, #400]	; (8001698 <HAL_ADC_Start_DMA+0x1a8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d004      	beq.n	8001514 <HAL_ADC_Start_DMA+0x24>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a63      	ldr	r2, [pc, #396]	; (800169c <HAL_ADC_Start_DMA+0x1ac>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d106      	bne.n	8001522 <HAL_ADC_Start_DMA+0x32>
 8001514:	4b60      	ldr	r3, [pc, #384]	; (8001698 <HAL_ADC_Start_DMA+0x1a8>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800151c:	2b00      	cmp	r3, #0
 800151e:	f040 80b3 	bne.w	8001688 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <HAL_ADC_Start_DMA+0x40>
 800152c:	2302      	movs	r3, #2
 800152e:	e0ae      	b.n	800168e <HAL_ADC_Start_DMA+0x19e>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 fa89 	bl	8001a50 <ADC_Enable>
 800153e:	4603      	mov	r3, r0
 8001540:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	2b00      	cmp	r3, #0
 8001546:	f040 809a 	bne.w	800167e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a4e      	ldr	r2, [pc, #312]	; (800169c <HAL_ADC_Start_DMA+0x1ac>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d105      	bne.n	8001574 <HAL_ADC_Start_DMA+0x84>
 8001568:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <HAL_ADC_Start_DMA+0x1a8>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d115      	bne.n	80015a0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158a:	2b00      	cmp	r3, #0
 800158c:	d026      	beq.n	80015dc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001596:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800159e:	e01d      	b.n	80015dc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a39      	ldr	r2, [pc, #228]	; (8001698 <HAL_ADC_Start_DMA+0x1a8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d004      	beq.n	80015c0 <HAL_ADC_Start_DMA+0xd0>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a38      	ldr	r2, [pc, #224]	; (800169c <HAL_ADC_Start_DMA+0x1ac>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d10d      	bne.n	80015dc <HAL_ADC_Start_DMA+0xec>
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <HAL_ADC_Start_DMA+0x1a8>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	f023 0206 	bic.w	r2, r3, #6
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80015f4:	e002      	b.n	80015fc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a25      	ldr	r2, [pc, #148]	; (80016a0 <HAL_ADC_Start_DMA+0x1b0>)
 800160a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4a24      	ldr	r2, [pc, #144]	; (80016a4 <HAL_ADC_Start_DMA+0x1b4>)
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4a23      	ldr	r2, [pc, #140]	; (80016a8 <HAL_ADC_Start_DMA+0x1b8>)
 800161a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f06f 0202 	mvn.w	r2, #2
 8001624:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001634:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6a18      	ldr	r0, [r3, #32]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	334c      	adds	r3, #76	; 0x4c
 8001640:	4619      	mov	r1, r3
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f000 fc75 	bl	8001f34 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001654:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001658:	d108      	bne.n	800166c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001668:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800166a:	e00f      	b.n	800168c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800167a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800167c:	e006      	b.n	800168c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001686:	e001      	b.n	800168c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800168c:	7dfb      	ldrb	r3, [r7, #23]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40012400 	.word	0x40012400
 800169c:	40012800 	.word	0x40012800
 80016a0:	08001b87 	.word	0x08001b87
 80016a4:	08001c03 	.word	0x08001c03
 80016a8:	08001c1f 	.word	0x08001c1f

080016ac <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f003 0320 	and.w	r3, r3, #32
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d03e      	beq.n	800174c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d039      	beq.n	800174c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016fe:	d11d      	bne.n	800173c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001704:	2b00      	cmp	r3, #0
 8001706:	d119      	bne.n	800173c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0220 	bic.w	r2, r2, #32
 8001716:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d105      	bne.n	800173c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff f903 	bl	8000948 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f06f 0212 	mvn.w	r2, #18
 800174a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	2b00      	cmp	r3, #0
 8001754:	d04d      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d048      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001782:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001786:	d012      	beq.n	80017ae <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001792:	2b00      	cmp	r3, #0
 8001794:	d125      	bne.n	80017e2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80017a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017a4:	d11d      	bne.n	80017e2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d119      	bne.n	80017e2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017bc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d105      	bne.n	80017e2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	f043 0201 	orr.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fa35 	bl	8001c52 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 020c 	mvn.w	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d012      	beq.n	8001822 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00d      	beq.n	8001822 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f812 	bl	800183c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0201 	mvn.w	r2, #1
 8001820:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x20>
 800187c:	2302      	movs	r3, #2
 800187e:	e0dc      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x1da>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b06      	cmp	r3, #6
 800188e:	d81c      	bhi.n	80018ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	3b05      	subs	r3, #5
 80018a2:	221f      	movs	r2, #31
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4019      	ands	r1, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	3b05      	subs	r3, #5
 80018bc:	fa00 f203 	lsl.w	r2, r0, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34
 80018c8:	e03c      	b.n	8001944 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d81c      	bhi.n	800190c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	3b23      	subs	r3, #35	; 0x23
 80018e4:	221f      	movs	r2, #31
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	4019      	ands	r1, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	3b23      	subs	r3, #35	; 0x23
 80018fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	631a      	str	r2, [r3, #48]	; 0x30
 800190a:	e01b      	b.n	8001944 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	3b41      	subs	r3, #65	; 0x41
 800191e:	221f      	movs	r2, #31
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	4019      	ands	r1, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	3b41      	subs	r3, #65	; 0x41
 8001938:	fa00 f203 	lsl.w	r2, r0, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b09      	cmp	r3, #9
 800194a:	d91c      	bls.n	8001986 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68d9      	ldr	r1, [r3, #12]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	3b1e      	subs	r3, #30
 800195e:	2207      	movs	r2, #7
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	4019      	ands	r1, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	6898      	ldr	r0, [r3, #8]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4613      	mov	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	3b1e      	subs	r3, #30
 8001978:	fa00 f203 	lsl.w	r2, r0, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	e019      	b.n	80019ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6919      	ldr	r1, [r3, #16]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	2207      	movs	r2, #7
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	4019      	ands	r1, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	6898      	ldr	r0, [r3, #8]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	fa00 f203 	lsl.w	r2, r0, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d003      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019c6:	2b11      	cmp	r3, #17
 80019c8:	d132      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <HAL_ADC_ConfigChannel+0x1e4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d125      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d126      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019f0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b10      	cmp	r3, #16
 80019f8:	d11a      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_ADC_ConfigChannel+0x1e8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <HAL_ADC_ConfigChannel+0x1ec>)
 8001a00:	fba2 2303 	umull	r2, r3, r2, r3
 8001a04:	0c9a      	lsrs	r2, r3, #18
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a10:	e002      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f9      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x1b2>
 8001a1e:	e007      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	f043 0220 	orr.w	r2, r3, #32
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	40012400 	.word	0x40012400
 8001a48:	20000018 	.word	0x20000018
 8001a4c:	431bde83 	.word	0x431bde83

08001a50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d040      	beq.n	8001af0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0201 	orr.w	r2, r2, #1
 8001a7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <ADC_Enable+0xac>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a1f      	ldr	r2, [pc, #124]	; (8001b00 <ADC_Enable+0xb0>)
 8001a84:	fba2 2303 	umull	r2, r3, r2, r3
 8001a88:	0c9b      	lsrs	r3, r3, #18
 8001a8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a8c:	e002      	b.n	8001a94 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f9      	bne.n	8001a8e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a9a:	f7ff fc47 	bl	800132c <HAL_GetTick>
 8001a9e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001aa0:	e01f      	b.n	8001ae2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001aa2:	f7ff fc43 	bl	800132c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d918      	bls.n	8001ae2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d011      	beq.n	8001ae2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	f043 0210 	orr.w	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	f043 0201 	orr.w	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e007      	b.n	8001af2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d1d8      	bne.n	8001aa2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000018 	.word	0x20000018
 8001b00:	431bde83 	.word	0x431bde83

08001b04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d12e      	bne.n	8001b7c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0201 	bic.w	r2, r2, #1
 8001b2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b2e:	f7ff fbfd 	bl	800132c <HAL_GetTick>
 8001b32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b34:	e01b      	b.n	8001b6e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b36:	f7ff fbf9 	bl	800132c <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d914      	bls.n	8001b6e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d10d      	bne.n	8001b6e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	f043 0210 	orr.w	r2, r3, #16
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e007      	b.n	8001b7e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d0dc      	beq.n	8001b36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d127      	bne.n	8001bf0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bb6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bba:	d115      	bne.n	8001be8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d111      	bne.n	8001be8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f7fe fead 	bl	8000948 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001bee:	e004      	b.n	8001bfa <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	4798      	blx	r3
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7ff fe0a 	bl	800182a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	f043 0204 	orr.w	r2, r3, #4
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f7ff fe02 	bl	800184e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	f003 0307 	and.w	r3, r3, #7
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db0b      	blt.n	8001cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	4906      	ldr	r1, [pc, #24]	; (8001cfc <__NVIC_EnableIRQ+0x34>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	2001      	movs	r0, #1
 8001cea:	fa00 f202 	lsl.w	r2, r0, r2
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	; (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ff90 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff2d 	bl	8001c64 <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff42 	bl	8001cac <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff90 	bl	8001d54 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5f 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff35 	bl	8001cc8 <__NVIC_EnableIRQ>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa2 	bl	8001db8 <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e043      	b.n	8001f1e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_DMA_Init+0xa8>)
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <HAL_DMA_Init+0xac>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	009a      	lsls	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <HAL_DMA_Init+0xb0>)
 8001eb2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001eca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ece:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	bffdfff8 	.word	0xbffdfff8
 8001f2c:	cccccccd 	.word	0xcccccccd
 8001f30:	40020000 	.word	0x40020000

08001f34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_DMA_Start_IT+0x20>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e04b      	b.n	8001fec <HAL_DMA_Start_IT+0xb8>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d13a      	bne.n	8001fde <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f937 	bl	8002200 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 020e 	orr.w	r2, r2, #14
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e00f      	b.n	8001fcc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0204 	bic.w	r2, r2, #4
 8001fba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 020a 	orr.w	r2, r2, #10
 8001fca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	e005      	b.n	8001fea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	2204      	movs	r2, #4
 8002012:	409a      	lsls	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d04f      	beq.n	80020bc <HAL_DMA_IRQHandler+0xc8>
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d04a      	beq.n	80020bc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d107      	bne.n	8002044 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0204 	bic.w	r2, r2, #4
 8002042:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a66      	ldr	r2, [pc, #408]	; (80021e4 <HAL_DMA_IRQHandler+0x1f0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d029      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xae>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a65      	ldr	r2, [pc, #404]	; (80021e8 <HAL_DMA_IRQHandler+0x1f4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d022      	beq.n	800209e <HAL_DMA_IRQHandler+0xaa>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a63      	ldr	r2, [pc, #396]	; (80021ec <HAL_DMA_IRQHandler+0x1f8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01a      	beq.n	8002098 <HAL_DMA_IRQHandler+0xa4>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a62      	ldr	r2, [pc, #392]	; (80021f0 <HAL_DMA_IRQHandler+0x1fc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d012      	beq.n	8002092 <HAL_DMA_IRQHandler+0x9e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a60      	ldr	r2, [pc, #384]	; (80021f4 <HAL_DMA_IRQHandler+0x200>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00a      	beq.n	800208c <HAL_DMA_IRQHandler+0x98>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5f      	ldr	r2, [pc, #380]	; (80021f8 <HAL_DMA_IRQHandler+0x204>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d102      	bne.n	8002086 <HAL_DMA_IRQHandler+0x92>
 8002080:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002084:	e00e      	b.n	80020a4 <HAL_DMA_IRQHandler+0xb0>
 8002086:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800208a:	e00b      	b.n	80020a4 <HAL_DMA_IRQHandler+0xb0>
 800208c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002090:	e008      	b.n	80020a4 <HAL_DMA_IRQHandler+0xb0>
 8002092:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002096:	e005      	b.n	80020a4 <HAL_DMA_IRQHandler+0xb0>
 8002098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800209c:	e002      	b.n	80020a4 <HAL_DMA_IRQHandler+0xb0>
 800209e:	2340      	movs	r3, #64	; 0x40
 80020a0:	e000      	b.n	80020a4 <HAL_DMA_IRQHandler+0xb0>
 80020a2:	2304      	movs	r3, #4
 80020a4:	4a55      	ldr	r2, [pc, #340]	; (80021fc <HAL_DMA_IRQHandler+0x208>)
 80020a6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8094 	beq.w	80021da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80020ba:	e08e      	b.n	80021da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2202      	movs	r2, #2
 80020c2:	409a      	lsls	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d056      	beq.n	800217a <HAL_DMA_IRQHandler+0x186>
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d051      	beq.n	800217a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10b      	bne.n	80020fc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 020a 	bic.w	r2, r2, #10
 80020f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a38      	ldr	r2, [pc, #224]	; (80021e4 <HAL_DMA_IRQHandler+0x1f0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d029      	beq.n	800215a <HAL_DMA_IRQHandler+0x166>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a37      	ldr	r2, [pc, #220]	; (80021e8 <HAL_DMA_IRQHandler+0x1f4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d022      	beq.n	8002156 <HAL_DMA_IRQHandler+0x162>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a35      	ldr	r2, [pc, #212]	; (80021ec <HAL_DMA_IRQHandler+0x1f8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01a      	beq.n	8002150 <HAL_DMA_IRQHandler+0x15c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a34      	ldr	r2, [pc, #208]	; (80021f0 <HAL_DMA_IRQHandler+0x1fc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d012      	beq.n	800214a <HAL_DMA_IRQHandler+0x156>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a32      	ldr	r2, [pc, #200]	; (80021f4 <HAL_DMA_IRQHandler+0x200>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00a      	beq.n	8002144 <HAL_DMA_IRQHandler+0x150>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a31      	ldr	r2, [pc, #196]	; (80021f8 <HAL_DMA_IRQHandler+0x204>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d102      	bne.n	800213e <HAL_DMA_IRQHandler+0x14a>
 8002138:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800213c:	e00e      	b.n	800215c <HAL_DMA_IRQHandler+0x168>
 800213e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002142:	e00b      	b.n	800215c <HAL_DMA_IRQHandler+0x168>
 8002144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002148:	e008      	b.n	800215c <HAL_DMA_IRQHandler+0x168>
 800214a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800214e:	e005      	b.n	800215c <HAL_DMA_IRQHandler+0x168>
 8002150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002154:	e002      	b.n	800215c <HAL_DMA_IRQHandler+0x168>
 8002156:	2320      	movs	r3, #32
 8002158:	e000      	b.n	800215c <HAL_DMA_IRQHandler+0x168>
 800215a:	2302      	movs	r3, #2
 800215c:	4a27      	ldr	r2, [pc, #156]	; (80021fc <HAL_DMA_IRQHandler+0x208>)
 800215e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	d034      	beq.n	80021da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002178:	e02f      	b.n	80021da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2208      	movs	r2, #8
 8002180:	409a      	lsls	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d028      	beq.n	80021dc <HAL_DMA_IRQHandler+0x1e8>
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d023      	beq.n	80021dc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 020e 	bic.w	r2, r2, #14
 80021a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	2101      	movs	r1, #1
 80021ae:	fa01 f202 	lsl.w	r2, r1, r2
 80021b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
    }
  }
  return;
 80021da:	bf00      	nop
 80021dc:	bf00      	nop
}
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40020008 	.word	0x40020008
 80021e8:	4002001c 	.word	0x4002001c
 80021ec:	40020030 	.word	0x40020030
 80021f0:	40020044 	.word	0x40020044
 80021f4:	40020058 	.word	0x40020058
 80021f8:	4002006c 	.word	0x4002006c
 80021fc:	40020000 	.word	0x40020000

08002200 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f202 	lsl.w	r2, r1, r2
 800221c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b10      	cmp	r3, #16
 800222c:	d108      	bne.n	8002240 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800223e:	e007      	b.n	8002250 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	60da      	str	r2, [r3, #12]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
	...

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b08b      	sub	sp, #44	; 0x2c
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800226a:	2300      	movs	r3, #0
 800226c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226e:	e169      	b.n	8002544 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002270:	2201      	movs	r2, #1
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	429a      	cmp	r2, r3
 800228a:	f040 8158 	bne.w	800253e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4a9a      	ldr	r2, [pc, #616]	; (80024fc <HAL_GPIO_Init+0x2a0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d05e      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 8002298:	4a98      	ldr	r2, [pc, #608]	; (80024fc <HAL_GPIO_Init+0x2a0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d875      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 800229e:	4a98      	ldr	r2, [pc, #608]	; (8002500 <HAL_GPIO_Init+0x2a4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d058      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 80022a4:	4a96      	ldr	r2, [pc, #600]	; (8002500 <HAL_GPIO_Init+0x2a4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d86f      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022aa:	4a96      	ldr	r2, [pc, #600]	; (8002504 <HAL_GPIO_Init+0x2a8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d052      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 80022b0:	4a94      	ldr	r2, [pc, #592]	; (8002504 <HAL_GPIO_Init+0x2a8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d869      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022b6:	4a94      	ldr	r2, [pc, #592]	; (8002508 <HAL_GPIO_Init+0x2ac>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d04c      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 80022bc:	4a92      	ldr	r2, [pc, #584]	; (8002508 <HAL_GPIO_Init+0x2ac>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d863      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022c2:	4a92      	ldr	r2, [pc, #584]	; (800250c <HAL_GPIO_Init+0x2b0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d046      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 80022c8:	4a90      	ldr	r2, [pc, #576]	; (800250c <HAL_GPIO_Init+0x2b0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d85d      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022ce:	2b12      	cmp	r3, #18
 80022d0:	d82a      	bhi.n	8002328 <HAL_GPIO_Init+0xcc>
 80022d2:	2b12      	cmp	r3, #18
 80022d4:	d859      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022d6:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <HAL_GPIO_Init+0x80>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	08002357 	.word	0x08002357
 80022e0:	08002331 	.word	0x08002331
 80022e4:	08002343 	.word	0x08002343
 80022e8:	08002385 	.word	0x08002385
 80022ec:	0800238b 	.word	0x0800238b
 80022f0:	0800238b 	.word	0x0800238b
 80022f4:	0800238b 	.word	0x0800238b
 80022f8:	0800238b 	.word	0x0800238b
 80022fc:	0800238b 	.word	0x0800238b
 8002300:	0800238b 	.word	0x0800238b
 8002304:	0800238b 	.word	0x0800238b
 8002308:	0800238b 	.word	0x0800238b
 800230c:	0800238b 	.word	0x0800238b
 8002310:	0800238b 	.word	0x0800238b
 8002314:	0800238b 	.word	0x0800238b
 8002318:	0800238b 	.word	0x0800238b
 800231c:	0800238b 	.word	0x0800238b
 8002320:	08002339 	.word	0x08002339
 8002324:	0800234d 	.word	0x0800234d
 8002328:	4a79      	ldr	r2, [pc, #484]	; (8002510 <HAL_GPIO_Init+0x2b4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800232e:	e02c      	b.n	800238a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	623b      	str	r3, [r7, #32]
          break;
 8002336:	e029      	b.n	800238c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	3304      	adds	r3, #4
 800233e:	623b      	str	r3, [r7, #32]
          break;
 8002340:	e024      	b.n	800238c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	3308      	adds	r3, #8
 8002348:	623b      	str	r3, [r7, #32]
          break;
 800234a:	e01f      	b.n	800238c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	330c      	adds	r3, #12
 8002352:	623b      	str	r3, [r7, #32]
          break;
 8002354:	e01a      	b.n	800238c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800235e:	2304      	movs	r3, #4
 8002360:	623b      	str	r3, [r7, #32]
          break;
 8002362:	e013      	b.n	800238c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d105      	bne.n	8002378 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800236c:	2308      	movs	r3, #8
 800236e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	611a      	str	r2, [r3, #16]
          break;
 8002376:	e009      	b.n	800238c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002378:	2308      	movs	r3, #8
 800237a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	615a      	str	r2, [r3, #20]
          break;
 8002382:	e003      	b.n	800238c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
          break;
 8002388:	e000      	b.n	800238c <HAL_GPIO_Init+0x130>
          break;
 800238a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2bff      	cmp	r3, #255	; 0xff
 8002390:	d801      	bhi.n	8002396 <HAL_GPIO_Init+0x13a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	e001      	b.n	800239a <HAL_GPIO_Init+0x13e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3304      	adds	r3, #4
 800239a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2bff      	cmp	r3, #255	; 0xff
 80023a0:	d802      	bhi.n	80023a8 <HAL_GPIO_Init+0x14c>
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	e002      	b.n	80023ae <HAL_GPIO_Init+0x152>
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	3b08      	subs	r3, #8
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	210f      	movs	r1, #15
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	401a      	ands	r2, r3
 80023c0:	6a39      	ldr	r1, [r7, #32]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	431a      	orrs	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80b1 	beq.w	800253e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023dc:	4b4d      	ldr	r3, [pc, #308]	; (8002514 <HAL_GPIO_Init+0x2b8>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	4a4c      	ldr	r2, [pc, #304]	; (8002514 <HAL_GPIO_Init+0x2b8>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6193      	str	r3, [r2, #24]
 80023e8:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <HAL_GPIO_Init+0x2b8>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023f4:	4a48      	ldr	r2, [pc, #288]	; (8002518 <HAL_GPIO_Init+0x2bc>)
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002400:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4013      	ands	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a40      	ldr	r2, [pc, #256]	; (800251c <HAL_GPIO_Init+0x2c0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d013      	beq.n	8002448 <HAL_GPIO_Init+0x1ec>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3f      	ldr	r2, [pc, #252]	; (8002520 <HAL_GPIO_Init+0x2c4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00d      	beq.n	8002444 <HAL_GPIO_Init+0x1e8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a3e      	ldr	r2, [pc, #248]	; (8002524 <HAL_GPIO_Init+0x2c8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d007      	beq.n	8002440 <HAL_GPIO_Init+0x1e4>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a3d      	ldr	r2, [pc, #244]	; (8002528 <HAL_GPIO_Init+0x2cc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d101      	bne.n	800243c <HAL_GPIO_Init+0x1e0>
 8002438:	2303      	movs	r3, #3
 800243a:	e006      	b.n	800244a <HAL_GPIO_Init+0x1ee>
 800243c:	2304      	movs	r3, #4
 800243e:	e004      	b.n	800244a <HAL_GPIO_Init+0x1ee>
 8002440:	2302      	movs	r3, #2
 8002442:	e002      	b.n	800244a <HAL_GPIO_Init+0x1ee>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HAL_GPIO_Init+0x1ee>
 8002448:	2300      	movs	r3, #0
 800244a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244c:	f002 0203 	and.w	r2, r2, #3
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	4093      	lsls	r3, r2
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800245a:	492f      	ldr	r1, [pc, #188]	; (8002518 <HAL_GPIO_Init+0x2bc>)
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002474:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_GPIO_Init+0x2d0>)
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	492c      	ldr	r1, [pc, #176]	; (800252c <HAL_GPIO_Init+0x2d0>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_GPIO_Init+0x2d0>)
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	43db      	mvns	r3, r3
 800248a:	4928      	ldr	r1, [pc, #160]	; (800252c <HAL_GPIO_Init+0x2d0>)
 800248c:	4013      	ands	r3, r2
 800248e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <HAL_GPIO_Init+0x2d0>)
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	4922      	ldr	r1, [pc, #136]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60cb      	str	r3, [r1, #12]
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	491e      	ldr	r1, [pc, #120]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4918      	ldr	r1, [pc, #96]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024d2:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	43db      	mvns	r3, r3
 80024da:	4914      	ldr	r1, [pc, #80]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024dc:	4013      	ands	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d021      	beq.n	8002530 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	490e      	ldr	r1, [pc, #56]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
 80024f8:	e021      	b.n	800253e <HAL_GPIO_Init+0x2e2>
 80024fa:	bf00      	nop
 80024fc:	10320000 	.word	0x10320000
 8002500:	10310000 	.word	0x10310000
 8002504:	10220000 	.word	0x10220000
 8002508:	10210000 	.word	0x10210000
 800250c:	10120000 	.word	0x10120000
 8002510:	10110000 	.word	0x10110000
 8002514:	40021000 	.word	0x40021000
 8002518:	40010000 	.word	0x40010000
 800251c:	40010800 	.word	0x40010800
 8002520:	40010c00 	.word	0x40010c00
 8002524:	40011000 	.word	0x40011000
 8002528:	40011400 	.word	0x40011400
 800252c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_GPIO_Init+0x304>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	43db      	mvns	r3, r3
 8002538:	4909      	ldr	r1, [pc, #36]	; (8002560 <HAL_GPIO_Init+0x304>)
 800253a:	4013      	ands	r3, r2
 800253c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	3301      	adds	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	f47f ae8e 	bne.w	8002270 <HAL_GPIO_Init+0x14>
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	372c      	adds	r7, #44	; 0x2c
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	40010400 	.word	0x40010400

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002580:	e003      	b.n	800258a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	611a      	str	r2, [r3, #16]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e26c      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8087 	beq.w	80026c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025b4:	4b92      	ldr	r3, [pc, #584]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 030c 	and.w	r3, r3, #12
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d00c      	beq.n	80025da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025c0:	4b8f      	ldr	r3, [pc, #572]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d112      	bne.n	80025f2 <HAL_RCC_OscConfig+0x5e>
 80025cc:	4b8c      	ldr	r3, [pc, #560]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d8:	d10b      	bne.n	80025f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025da:	4b89      	ldr	r3, [pc, #548]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d06c      	beq.n	80026c0 <HAL_RCC_OscConfig+0x12c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d168      	bne.n	80026c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e246      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fa:	d106      	bne.n	800260a <HAL_RCC_OscConfig+0x76>
 80025fc:	4b80      	ldr	r3, [pc, #512]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a7f      	ldr	r2, [pc, #508]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	e02e      	b.n	8002668 <HAL_RCC_OscConfig+0xd4>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10c      	bne.n	800262c <HAL_RCC_OscConfig+0x98>
 8002612:	4b7b      	ldr	r3, [pc, #492]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a7a      	ldr	r2, [pc, #488]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	4b78      	ldr	r3, [pc, #480]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a77      	ldr	r2, [pc, #476]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e01d      	b.n	8002668 <HAL_RCC_OscConfig+0xd4>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0xbc>
 8002636:	4b72      	ldr	r3, [pc, #456]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a71      	ldr	r2, [pc, #452]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800263c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e00b      	b.n	8002668 <HAL_RCC_OscConfig+0xd4>
 8002650:	4b6b      	ldr	r3, [pc, #428]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a6a      	ldr	r2, [pc, #424]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b68      	ldr	r3, [pc, #416]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a67      	ldr	r2, [pc, #412]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002666:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe fe5c 	bl	800132c <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002678:	f7fe fe58 	bl	800132c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e1fa      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b5d      	ldr	r3, [pc, #372]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0xe4>
 8002696:	e014      	b.n	80026c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fe48 	bl	800132c <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a0:	f7fe fe44 	bl	800132c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e1e6      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	4b53      	ldr	r3, [pc, #332]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x10c>
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d063      	beq.n	8002796 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ce:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026da:	4b49      	ldr	r3, [pc, #292]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d11c      	bne.n	8002720 <HAL_RCC_OscConfig+0x18c>
 80026e6:	4b46      	ldr	r3, [pc, #280]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d116      	bne.n	8002720 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f2:	4b43      	ldr	r3, [pc, #268]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_RCC_OscConfig+0x176>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e1ba      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4939      	ldr	r1, [pc, #228]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	e03a      	b.n	8002796 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002728:	4b36      	ldr	r3, [pc, #216]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7fe fdfd 	bl	800132c <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002736:	f7fe fdf9 	bl	800132c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e19b      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4927      	ldr	r1, [pc, #156]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
 8002768:	e015      	b.n	8002796 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7fe fddc 	bl	800132c <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002778:	f7fe fdd8 	bl	800132c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e17a      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d03a      	beq.n	8002818 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d019      	beq.n	80027de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027aa:	4b17      	ldr	r3, [pc, #92]	; (8002808 <HAL_RCC_OscConfig+0x274>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b0:	f7fe fdbc 	bl	800132c <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b8:	f7fe fdb8 	bl	800132c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e15a      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027d6:	2001      	movs	r0, #1
 80027d8:	f000 fa9a 	bl	8002d10 <RCC_Delay>
 80027dc:	e01c      	b.n	8002818 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_RCC_OscConfig+0x274>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e4:	f7fe fda2 	bl	800132c <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ea:	e00f      	b.n	800280c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ec:	f7fe fd9e 	bl	800132c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d908      	bls.n	800280c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e140      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	42420000 	.word	0x42420000
 8002808:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280c:	4b9e      	ldr	r3, [pc, #632]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e9      	bne.n	80027ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80a6 	beq.w	8002972 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002826:	2300      	movs	r3, #0
 8002828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282a:	4b97      	ldr	r3, [pc, #604]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	4b94      	ldr	r3, [pc, #592]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4a93      	ldr	r2, [pc, #588]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 800283c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002840:	61d3      	str	r3, [r2, #28]
 8002842:	4b91      	ldr	r3, [pc, #580]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284e:	2301      	movs	r3, #1
 8002850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002852:	4b8e      	ldr	r3, [pc, #568]	; (8002a8c <HAL_RCC_OscConfig+0x4f8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d118      	bne.n	8002890 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285e:	4b8b      	ldr	r3, [pc, #556]	; (8002a8c <HAL_RCC_OscConfig+0x4f8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a8a      	ldr	r2, [pc, #552]	; (8002a8c <HAL_RCC_OscConfig+0x4f8>)
 8002864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286a:	f7fe fd5f 	bl	800132c <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002872:	f7fe fd5b 	bl	800132c <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b64      	cmp	r3, #100	; 0x64
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0fd      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	4b81      	ldr	r3, [pc, #516]	; (8002a8c <HAL_RCC_OscConfig+0x4f8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0x312>
 8002898:	4b7b      	ldr	r3, [pc, #492]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4a7a      	ldr	r2, [pc, #488]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6213      	str	r3, [r2, #32]
 80028a4:	e02d      	b.n	8002902 <HAL_RCC_OscConfig+0x36e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x334>
 80028ae:	4b76      	ldr	r3, [pc, #472]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4a75      	ldr	r2, [pc, #468]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6213      	str	r3, [r2, #32]
 80028ba:	4b73      	ldr	r3, [pc, #460]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4a72      	ldr	r2, [pc, #456]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	6213      	str	r3, [r2, #32]
 80028c6:	e01c      	b.n	8002902 <HAL_RCC_OscConfig+0x36e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x356>
 80028d0:	4b6d      	ldr	r3, [pc, #436]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4a6c      	ldr	r2, [pc, #432]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6213      	str	r3, [r2, #32]
 80028dc:	4b6a      	ldr	r3, [pc, #424]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4a69      	ldr	r2, [pc, #420]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6213      	str	r3, [r2, #32]
 80028e8:	e00b      	b.n	8002902 <HAL_RCC_OscConfig+0x36e>
 80028ea:	4b67      	ldr	r3, [pc, #412]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	4a66      	ldr	r2, [pc, #408]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6213      	str	r3, [r2, #32]
 80028f6:	4b64      	ldr	r3, [pc, #400]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a63      	ldr	r2, [pc, #396]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d015      	beq.n	8002936 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290a:	f7fe fd0f 	bl	800132c <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe fd0b 	bl	800132c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e0ab      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	4b57      	ldr	r3, [pc, #348]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ee      	beq.n	8002912 <HAL_RCC_OscConfig+0x37e>
 8002934:	e014      	b.n	8002960 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002936:	f7fe fcf9 	bl	800132c <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe fcf5 	bl	800132c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e095      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	4b4c      	ldr	r3, [pc, #304]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ee      	bne.n	800293e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d105      	bne.n	8002972 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002966:	4b48      	ldr	r3, [pc, #288]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	4a47      	ldr	r2, [pc, #284]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 800296c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002970:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8081 	beq.w	8002a7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297c:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b08      	cmp	r3, #8
 8002986:	d061      	beq.n	8002a4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d146      	bne.n	8002a1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002990:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_RCC_OscConfig+0x4fc>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe fcc9 	bl	800132c <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299e:	f7fe fcc5 	bl	800132c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e067      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b0:	4b35      	ldr	r3, [pc, #212]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c4:	d108      	bne.n	80029d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	492d      	ldr	r1, [pc, #180]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a19      	ldr	r1, [r3, #32]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	430b      	orrs	r3, r1
 80029ea:	4927      	ldr	r1, [pc, #156]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f0:	4b27      	ldr	r3, [pc, #156]	; (8002a90 <HAL_RCC_OscConfig+0x4fc>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe fc99 	bl	800132c <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe fc95 	bl	800132c <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e037      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x46a>
 8002a1c:	e02f      	b.n	8002a7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <HAL_RCC_OscConfig+0x4fc>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7fe fc82 	bl	800132c <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fe fc7e 	bl	800132c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e020      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x498>
 8002a4a:	e018      	b.n	8002a7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e013      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	42420060 	.word	0x42420060

08002a94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0d0      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d910      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b67      	ldr	r3, [pc, #412]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 0207 	bic.w	r2, r3, #7
 8002abe:	4965      	ldr	r1, [pc, #404]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0b8      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af0:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4a58      	ldr	r2, [pc, #352]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002afa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a52      	ldr	r2, [pc, #328]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	494d      	ldr	r1, [pc, #308]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d040      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d115      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e07f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e073      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e06b      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4936      	ldr	r1, [pc, #216]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b84:	f7fe fbd2 	bl	800132c <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe fbce 	bl	800132c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e053      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d210      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 0207 	bic.w	r2, r3, #7
 8002bca:	4922      	ldr	r1, [pc, #136]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e032      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4916      	ldr	r1, [pc, #88]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	490e      	ldr	r1, [pc, #56]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c22:	f000 f821 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	490a      	ldr	r1, [pc, #40]	; (8002c5c <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	5ccb      	ldrb	r3, [r1, r3]
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <HAL_RCC_ClockConfig+0x1cc>)
 8002c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_ClockConfig+0x1d0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fb30 	bl	80012a8 <HAL_InitTick>

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40022000 	.word	0x40022000
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08003724 	.word	0x08003724
 8002c60:	20000018 	.word	0x20000018
 8002c64:	2000001c 	.word	0x2000001c

08002c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c82:	4b1e      	ldr	r3, [pc, #120]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x94>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d002      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x30>
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d003      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0x36>
 8002c96:	e027      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c9a:	613b      	str	r3, [r7, #16]
      break;
 8002c9c:	e027      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	0c9b      	lsrs	r3, r3, #18
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ca8:	5cd3      	ldrb	r3, [r2, r3]
 8002caa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d010      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x94>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	0c5b      	lsrs	r3, r3, #17
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cc2:	5cd3      	ldrb	r3, [r2, r3]
 8002cc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cca:	fb02 f203 	mul.w	r2, r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e004      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a0c      	ldr	r2, [pc, #48]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	613b      	str	r3, [r7, #16]
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cea:	613b      	str	r3, [r7, #16]
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	693b      	ldr	r3, [r7, #16]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	007a1200 	.word	0x007a1200
 8002d04:	08003734 	.word	0x08003734
 8002d08:	08003744 	.word	0x08003744
 8002d0c:	003d0900 	.word	0x003d0900

08002d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <RCC_Delay+0x34>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <RCC_Delay+0x38>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0a5b      	lsrs	r3, r3, #9
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d2c:	bf00      	nop
  }
  while (Delay --);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	60fa      	str	r2, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f9      	bne.n	8002d2c <RCC_Delay+0x1c>
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	20000018 	.word	0x20000018
 8002d48:	10624dd3 	.word	0x10624dd3

08002d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d07d      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d6c:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10d      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d78:	4b4c      	ldr	r3, [pc, #304]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	4a4b      	ldr	r2, [pc, #300]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d82:	61d3      	str	r3, [r2, #28]
 8002d84:	4b49      	ldr	r3, [pc, #292]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d94:	4b46      	ldr	r3, [pc, #280]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d118      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da0:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a42      	ldr	r2, [pc, #264]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002daa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dac:	f7fe fabe 	bl	800132c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db2:	e008      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db4:	f7fe faba 	bl	800132c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e06d      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	4b3a      	ldr	r3, [pc, #232]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dd2:	4b36      	ldr	r3, [pc, #216]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d02e      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d027      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002df0:	4b2e      	ldr	r3, [pc, #184]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dfa:	4b2e      	ldr	r3, [pc, #184]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e00:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e06:	4a29      	ldr	r2, [pc, #164]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d014      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe fa89 	bl	800132c <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe fa85 	bl	800132c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e036      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ee      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e40:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4917      	ldr	r1, [pc, #92]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d105      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	4a13      	ldr	r2, [pc, #76]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	490b      	ldr	r1, [pc, #44]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	4904      	ldr	r1, [pc, #16]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40007000 	.word	0x40007000
 8002eb4:	42420440 	.word	0x42420440

08002eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e041      	b.n	8002f4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fe f910 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	f000 fa74 	bl	80033e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d001      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e03a      	b.n	8002fe6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <HAL_TIM_Base_Start_IT+0x98>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00e      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x58>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9a:	d009      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x58>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x58>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d111      	bne.n	8002fd4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d010      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0201 	orr.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd2:	e007      	b.n	8002fe4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	40012c00 	.word	0x40012c00
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40000800 	.word	0x40000800

08002ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b02      	cmp	r3, #2
 8003010:	d122      	bne.n	8003058 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b02      	cmp	r3, #2
 800301e:	d11b      	bne.n	8003058 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0202 	mvn.w	r2, #2
 8003028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f9b4 	bl	80033ac <HAL_TIM_IC_CaptureCallback>
 8003044:	e005      	b.n	8003052 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f9a7 	bl	800339a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f9b6 	bl	80033be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b04      	cmp	r3, #4
 8003064:	d122      	bne.n	80030ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b04      	cmp	r3, #4
 8003072:	d11b      	bne.n	80030ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0204 	mvn.w	r2, #4
 800307c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2202      	movs	r2, #2
 8003082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f98a 	bl	80033ac <HAL_TIM_IC_CaptureCallback>
 8003098:	e005      	b.n	80030a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f97d 	bl	800339a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f98c 	bl	80033be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d122      	bne.n	8003100 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d11b      	bne.n	8003100 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0208 	mvn.w	r2, #8
 80030d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2204      	movs	r2, #4
 80030d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f960 	bl	80033ac <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f953 	bl	800339a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f962 	bl	80033be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	2b10      	cmp	r3, #16
 800310c:	d122      	bne.n	8003154 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b10      	cmp	r3, #16
 800311a:	d11b      	bne.n	8003154 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0210 	mvn.w	r2, #16
 8003124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2208      	movs	r2, #8
 800312a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f936 	bl	80033ac <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f929 	bl	800339a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f938 	bl	80033be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d10e      	bne.n	8003180 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0201 	mvn.w	r2, #1
 8003178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fbc4 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318a:	2b80      	cmp	r3, #128	; 0x80
 800318c:	d10e      	bne.n	80031ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003198:	2b80      	cmp	r3, #128	; 0x80
 800319a:	d107      	bne.n	80031ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fa7b 	bl	80036a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b40      	cmp	r3, #64	; 0x40
 80031b8:	d10e      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d107      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f8fc 	bl	80033d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	d10e      	bne.n	8003204 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d107      	bne.n	8003204 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0220 	mvn.w	r2, #32
 80031fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fa46 	bl	8003690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_TIM_ConfigClockSource+0x1c>
 8003224:	2302      	movs	r3, #2
 8003226:	e0b4      	b.n	8003392 <HAL_TIM_ConfigClockSource+0x186>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800324e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003260:	d03e      	beq.n	80032e0 <HAL_TIM_ConfigClockSource+0xd4>
 8003262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003266:	f200 8087 	bhi.w	8003378 <HAL_TIM_ConfigClockSource+0x16c>
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326e:	f000 8086 	beq.w	800337e <HAL_TIM_ConfigClockSource+0x172>
 8003272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003276:	d87f      	bhi.n	8003378 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b70      	cmp	r3, #112	; 0x70
 800327a:	d01a      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0xa6>
 800327c:	2b70      	cmp	r3, #112	; 0x70
 800327e:	d87b      	bhi.n	8003378 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b60      	cmp	r3, #96	; 0x60
 8003282:	d050      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0x11a>
 8003284:	2b60      	cmp	r3, #96	; 0x60
 8003286:	d877      	bhi.n	8003378 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b50      	cmp	r3, #80	; 0x50
 800328a:	d03c      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0xfa>
 800328c:	2b50      	cmp	r3, #80	; 0x50
 800328e:	d873      	bhi.n	8003378 <HAL_TIM_ConfigClockSource+0x16c>
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d058      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x13a>
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	d86f      	bhi.n	8003378 <HAL_TIM_ConfigClockSource+0x16c>
 8003298:	2b30      	cmp	r3, #48	; 0x30
 800329a:	d064      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0x15a>
 800329c:	2b30      	cmp	r3, #48	; 0x30
 800329e:	d86b      	bhi.n	8003378 <HAL_TIM_ConfigClockSource+0x16c>
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d060      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0x15a>
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d867      	bhi.n	8003378 <HAL_TIM_ConfigClockSource+0x16c>
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d05c      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0x15a>
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d05a      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0x15a>
 80032b0:	e062      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6899      	ldr	r1, [r3, #8]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f000 f968 	bl	8003596 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	609a      	str	r2, [r3, #8]
      break;
 80032de:	e04f      	b.n	8003380 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	6899      	ldr	r1, [r3, #8]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f000 f951 	bl	8003596 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003302:	609a      	str	r2, [r3, #8]
      break;
 8003304:	e03c      	b.n	8003380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6859      	ldr	r1, [r3, #4]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	461a      	mov	r2, r3
 8003314:	f000 f8c8 	bl	80034a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2150      	movs	r1, #80	; 0x50
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f91f 	bl	8003562 <TIM_ITRx_SetConfig>
      break;
 8003324:	e02c      	b.n	8003380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	461a      	mov	r2, r3
 8003334:	f000 f8e6 	bl	8003504 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2160      	movs	r1, #96	; 0x60
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f90f 	bl	8003562 <TIM_ITRx_SetConfig>
      break;
 8003344:	e01c      	b.n	8003380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6859      	ldr	r1, [r3, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	461a      	mov	r2, r3
 8003354:	f000 f8a8 	bl	80034a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2140      	movs	r1, #64	; 0x40
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f8ff 	bl	8003562 <TIM_ITRx_SetConfig>
      break;
 8003364:	e00c      	b.n	8003380 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f000 f8f6 	bl	8003562 <TIM_ITRx_SetConfig>
      break;
 8003376:	e003      	b.n	8003380 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
      break;
 800337c:	e000      	b.n	8003380 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800337e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003390:	7bfb      	ldrb	r3, [r7, #15]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr

080033be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
	...

080033e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a29      	ldr	r2, [pc, #164]	; (800349c <TIM_Base_SetConfig+0xb8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00b      	beq.n	8003414 <TIM_Base_SetConfig+0x30>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003402:	d007      	beq.n	8003414 <TIM_Base_SetConfig+0x30>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a26      	ldr	r2, [pc, #152]	; (80034a0 <TIM_Base_SetConfig+0xbc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <TIM_Base_SetConfig+0x30>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a25      	ldr	r2, [pc, #148]	; (80034a4 <TIM_Base_SetConfig+0xc0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d108      	bne.n	8003426 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1c      	ldr	r2, [pc, #112]	; (800349c <TIM_Base_SetConfig+0xb8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00b      	beq.n	8003446 <TIM_Base_SetConfig+0x62>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003434:	d007      	beq.n	8003446 <TIM_Base_SetConfig+0x62>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <TIM_Base_SetConfig+0xbc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_Base_SetConfig+0x62>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a18      	ldr	r2, [pc, #96]	; (80034a4 <TIM_Base_SetConfig+0xc0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d108      	bne.n	8003458 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a07      	ldr	r2, [pc, #28]	; (800349c <TIM_Base_SetConfig+0xb8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d103      	bne.n	800348c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	615a      	str	r2, [r3, #20]
}
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800

080034a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f023 0201 	bic.w	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f023 030a 	bic.w	r3, r3, #10
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f023 0210 	bic.w	r2, r3, #16
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800352e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	031b      	lsls	r3, r3, #12
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003540:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	621a      	str	r2, [r3, #32]
}
 8003558:	bf00      	nop
 800355a:	371c      	adds	r7, #28
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	f043 0307 	orr.w	r3, r3, #7
 8003584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	609a      	str	r2, [r3, #8]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr

08003596 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003596:	b480      	push	{r7}
 8003598:	b087      	sub	sp, #28
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	021a      	lsls	r2, r3, #8
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4313      	orrs	r3, r2
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	609a      	str	r2, [r3, #8]
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e046      	b.n	800367a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a16      	ldr	r2, [pc, #88]	; (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00e      	beq.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003638:	d009      	beq.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a12      	ldr	r2, [pc, #72]	; (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a10      	ldr	r2, [pc, #64]	; (800368c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d10c      	bne.n	8003668 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	4313      	orrs	r3, r2
 800365e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800

08003690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <__libc_init_array>:
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	2600      	movs	r6, #0
 80036b8:	4d0c      	ldr	r5, [pc, #48]	; (80036ec <__libc_init_array+0x38>)
 80036ba:	4c0d      	ldr	r4, [pc, #52]	; (80036f0 <__libc_init_array+0x3c>)
 80036bc:	1b64      	subs	r4, r4, r5
 80036be:	10a4      	asrs	r4, r4, #2
 80036c0:	42a6      	cmp	r6, r4
 80036c2:	d109      	bne.n	80036d8 <__libc_init_array+0x24>
 80036c4:	f000 f822 	bl	800370c <_init>
 80036c8:	2600      	movs	r6, #0
 80036ca:	4d0a      	ldr	r5, [pc, #40]	; (80036f4 <__libc_init_array+0x40>)
 80036cc:	4c0a      	ldr	r4, [pc, #40]	; (80036f8 <__libc_init_array+0x44>)
 80036ce:	1b64      	subs	r4, r4, r5
 80036d0:	10a4      	asrs	r4, r4, #2
 80036d2:	42a6      	cmp	r6, r4
 80036d4:	d105      	bne.n	80036e2 <__libc_init_array+0x2e>
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
 80036d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036dc:	4798      	blx	r3
 80036de:	3601      	adds	r6, #1
 80036e0:	e7ee      	b.n	80036c0 <__libc_init_array+0xc>
 80036e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e6:	4798      	blx	r3
 80036e8:	3601      	adds	r6, #1
 80036ea:	e7f2      	b.n	80036d2 <__libc_init_array+0x1e>
 80036ec:	08003748 	.word	0x08003748
 80036f0:	08003748 	.word	0x08003748
 80036f4:	08003748 	.word	0x08003748
 80036f8:	0800374c 	.word	0x0800374c

080036fc <memset>:
 80036fc:	4603      	mov	r3, r0
 80036fe:	4402      	add	r2, r0
 8003700:	4293      	cmp	r3, r2
 8003702:	d100      	bne.n	8003706 <memset+0xa>
 8003704:	4770      	bx	lr
 8003706:	f803 1b01 	strb.w	r1, [r3], #1
 800370a:	e7f9      	b.n	8003700 <memset+0x4>

0800370c <_init>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr

08003718 <_fini>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	bf00      	nop
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr
